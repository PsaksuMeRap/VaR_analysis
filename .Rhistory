library(knitr)
?apply
head(ret.sig)
ret.sig<-as.xts(rollapply(as.vector(ret),width=hist.len,FUN=sd))
ret.sig<-rollapply(as.vector(ret),width=hist.len,FUN=sd)
head(ret.sig)
ret.sig<-rollapply(as.xts(ret),width=hist.len,FUN=sd)
ret.sig<-as.xts(rollapply(as.vector(ret),width=hist.len,FUN=sd))
?sd
warnings()
?rollapply
ret.sig<-rollapply(ret,width=hist.len,FUN=sd,by.column=TRUE)
warnings()
ret.sig<-rollapply(as.xts(as.vector(ret)),width=hist.len,FUN=sd,by.column=TRUE)
ret.sig<-rollapply(as.vector(ret),width=hist.len,FUN=sd,by.column=TRUE)
head(ret.sig)
plot(ret.sig)
plot.xts(ret.sig*sqrt(biz.days)*100,las=1)
ret.sig<-as.xts(rollapply(ret,width=hist.len,FUN=sd,by.column=TRUE))
ret.sig<-as.xts(apply(ret,2,sd))
ret.sig<-apply(ret,2,sd)
plot(ret.sig)
ret.sig<-sapply(ret,2,sd)
?apply
ret.sig<-sapply(ret,2,FUN=sd)
ret.sig<-apply(ret,2,FUN=sd)
plot(ret.sig)
ret.sig<-as.xts(rollapply(ret,width=window,FUN=sd))
ret.sig<-as.xts(rollapply(ret,width=hist.len,FUN=sd))
ret<-periodReturn(data,period="daily",subset=NULL,type="log")
library(quantmod)
library(PerformanceAnalytics)
library(xts)
library(knitr)
ret<-periodReturn(data,period="daily",subset=NULL,type="log")
ret.sig<-as.xts(rollapply(ret,width=hist.len,FUN=sd))
warnings()
head(ret)
rs<-apply(ret,2,sd)
head(rs)
rs<-sapply(ret,2,sd)
?sapply
rs<-sapply(ret,sd,use.names=TRUE)
rs<-sapply(ret,sd,USE.NAMES=TRUE)
rs<-lapply(ret,sd)
?apply
?sd
?rollapply
ret.sig<-as.xts(rollapply(as.vector(ret),width=hist.len,FUN=sd))
?as.xts
ret.sig<-as.xts(rollapply(as.array(ret),width=hist.len,FUN=sd))
warnings()
ret.sig<-rollapply(ret,width=hist.len,FUN=apply(ret) MARGIN=2, FUN=sd))
ret.sig<-rollapply(ret,width=hist.len,FUN=function(ret) apply(X=ret,MARGIN=2, FUN=sd))
head(ret.sig)
plot.xts(ret.sig)
install.packages(c("digest", "evaluate", "formatR", "ggplot2", "gtable", "knitr", "plyr", "Rcpp", "reshape2", "scales", "stringr", "xts", "zoo"))
library(quantmod)
library(PerformanceAnalytics)
library(xts)
library(knitr)
library(knitr)
install.packages("knitr")
detach("package:knitr")
install.packages("knitr")
library("knitr")
library(quantmod,warn.conflicts=FALSE)
library(PerformanceAnalytics,warn.conflicts=FALSE)
library(xts,warn.conflicts=FALSE)
library(knitr,warn.conflicts=FALSE)
tickers.equity=c("SP500","DJIA") # SP500 and DJIA
getData<-function(tickers){
for (i in 1:length(tickers)){
getSymbols(tickers[i],src="FRED",auto.assign=TRUE)
}
}
getData(tickers.equity)
data.equity<-list(SP500,DJIA)
length(data.equity)
datalist[i]
data.equity[1]
head(data.equity)
names(data.equity[i])
head(data.equity)
data.equity[1:5]
data.equity[[1:5]]
r<-list(c("adam","c","duncan"))
r
r[[1],1]
r[[1]]
r[1]
index(SP500,1)
index(SP500,2)
?list
r.names
r
names(r)
names(r)<-c("first","middle","last")
names(r)<-c("first")
r
SP500$SP500
names(SP500)
names(data.equity[1])
names(data.equity[[1]])
vsum<-function(datalist,p,window,method,inv.var){
# now, tickers is a list. We'll cycle through the list and generate our summary output.
# we can dispense with having to get the data on the fly.
n<-length(datalist)
out<-data.frame()
for (i in 1:n){
ret<-periodReturn(datalist[[i]],period="daily",subset=NULL,type="log")
ret.mu<-rollapply(ret,width=window,FUN=mean)
ret.sig<-rollapply(ret,width=window,FUN=function(ret) apply(X=ret,MARGIN=2, FUN=sd))
ret.skew<-rollapply(ret,width=window,FUN=function(ret) skewness(ret,method="moment"))
ret.kurt<-rollapply(ret,width=window,FUN=function(ret) kurtosis(ret,method="moment"))
ret.var<-rollapply(ret,width=window,
FUN=function(ret) VaR(R=ret,
p=p,
method=method,
clean="none",
portfolio_method="single",
weights=NULL,
mu=ret.mu,
sigma=ret.sig,
m3=ret.skew,#skewness of series
m4=ret.kurt,#kurtosis of series
invert=inv.var),
align="right"
)
first.date<-index(first(ret.var))
ret.sub<-window(ret,from=first.date)
act.var.ratio<-ret.sub/ret.var
out[i,1]<-names(datalist[[i]])
out[i,2]<-max(act.var.ratio)
out[i,3]<-mean(act.var.ratio)
out[i,4]<-quantile(act.var.ratio,p,na.rm=TRUE)
}
names(out)<-c("name","max.ratio","mean.ratio","95.q.ratio")
return(out)
}
vb.summary<-vsum(data.equity,.95,1260,"historical",FALSE)
vsum<-function(datalist,p,window,method,inv.var){
# now, tickers is a list. We'll cycle through the list and generate our summary output.
# we can dispense with having to get the data on the fly.
n<-length(datalist)
out<-data.frame()
for (i in 1:n){
ret<-periodReturn(datalist[[i]],period="daily",subset=NULL,type="log")
if(method=="historical"){
ret.var<-rollapply(ret,width=window,
FUN=function(ret) VaR(R=ret,
p=p,
method=method,
clean="none",
portfolio_method="single",
invert=inv.var),
align="right"
)
} else {
ret.mu<-rollapply(ret,width=window,FUN=mean)
ret.sig<-rollapply(ret,width=window,FUN=function(ret) apply(X=ret,MARGIN=2, FUN=sd))
ret.skew<-rollapply(ret,width=window,FUN=function(ret) skewness(ret,method="moment"))
ret.kurt<-rollapply(ret,width=window,FUN=function(ret) kurtosis(ret,method="moment"))
ret.var<-rollapply(ret,width=window,
FUN=function(ret) VaR(R=ret,
p=p,
method=method,
clean="none",
portfolio_method="single",
weights=NULL,
mu=ret.mu,
sigma=ret.sig,
m3=ret.skew,#skewness of series
m4=ret.kurt,#kurtosis of series
invert=inv.var),
align="right"
)
}
first.date<-index(first(ret.var))
ret.sub<-window(ret,from=first.date)
act.var.ratio<-ret.sub/ret.var
act.var.ratio<-subset(act.var.ratio,subset=(act.var.ratio<0))
out[i,1]<-names(datalist[[i]])
out[i,2]<-max(act.var.ratio)
out[i,3]<-mean(act.var.ratio)
out[i,4]<-quantile(act.var.ratio,p,na.rm=TRUE)
}
names(out)<-c("name","max.ratio","mean.ratio","95.q.ratio")
return(out)
}
vb.summary<-vsum(data.equity,.95,1260,"historical",FALSE)
vb.summary
vsum<-function(datalist,p,window,method,inv.var){
# now, tickers is a list. We'll cycle through the list and generate our summary output.
# we can dispense with having to get the data on the fly.
n<-length(datalist)
out<-data.frame()
for (i in 1:n){
ret<-periodReturn(datalist[[i]],period="daily",subset=NULL,type="log")
if(method=="historical"){
ret.var<-rollapply(ret,width=window,
FUN=function(ret) VaR(R=ret,
p=p,
method=method,
clean="none",
portfolio_method="single",
invert=inv.var),
align="right"
)
} else {
ret.mu<-rollapply(ret,width=window,FUN=mean)
ret.sig<-rollapply(ret,width=window,FUN=function(ret) apply(X=ret,MARGIN=2, FUN=sd))
ret.skew<-rollapply(ret,width=window,FUN=function(ret) skewness(ret,method="moment"))
ret.kurt<-rollapply(ret,width=window,FUN=function(ret) kurtosis(ret,method="moment"))
ret.var<-rollapply(ret,width=window,
FUN=function(ret) VaR(R=ret,
p=p,
method=method,
clean="none",
portfolio_method="single",
weights=NULL,
mu=ret.mu,
sigma=ret.sig,
m3=ret.skew,#skewness of series
m4=ret.kurt,#kurtosis of series
invert=inv.var),
align="right"
)
}
first.date<-index(first(ret.var))
ret.sub<-window(ret,from=first.date)
act.var.ratio<-ret.sub/ret.var
act.var.ratio<-subset(act.var.ratio,subset=(act.var.ratio<0))
out[i,1]<-names(datalist[[i]])
out[i,2]<-min(act.var.ratio)
out[i,3]<-mean(act.var.ratio)
out[i,4]<-quantile(act.var.ratio,(1-p),na.rm=TRUE)
}
names(out)<-c("name","max.ratio","mean.ratio","95.q.ratio")
return(out)
}
vb.summary<-vsum(data.equity,.95,1260,"historical",FALSE)
vb.summary
data.fx<-list(DEXUSEU,1/DEXMXUS,DEXALUS,1/DEXJPUS,1/DEXKOUS)
tickers.equity=c("SP500","DJIA") # SP500 and DJIA
tickers.fx=c("DEXUSEU","DEXMXUS","DEXALUS","DEXJPUS","DEXKOUS") # EURUSD, USDMXN, AUDUSD, USDJPY, and USDKRW
tickers.commod=c("DCOILWTICO","GOLDAMGBD228NLBM","DCOILBRENTEU") # WTI and Gold
tickers.rates=c("DSWP2","DSWP10","DSWP30")
getData(tickers.fx)
getData(tickers.commod)
getData(tickers.rates)
tickers.fx=c("DEXUSEU","DEXMXUS","DEXUSAL","DEXJPUS","DEXKOUS") # EURUSD, USDMXN, AUDUSD, USDJPY, and USDKRW
getData(tickers.fx)
data.equity<-list(SP500,DJIA)
data.fx<-list(DEXUSEU,1/DEXMXUS,DEXALUS,1/DEXJPUS,1/DEXKOUS)
data.commod<-list(DCOILWTICO,GOLDAMGBD228NLBM,DCOILBRENTEU)
data.rates<-list(DSWP2,DSWP10,DSWP30)
data.equity<-list(SP500,DJIA)
data.fx<-list(DEXUSEU,1/DEXMXUS,DEXUSAL,1/DEXJPUS,1/DEXKOUS)
data.commod<-list(DCOILWTICO,GOLDAMGBD228NLBM,DCOILBRENTEU)
data.rates<-list(DSWP2,DSWP10,DSWP30)
par(mfrow(c(length(data.fx),2)))
par(mfrow=(c(length(data.fx),2)))
for (i in 1:length(data.fx)){
v<-varFun(data,.95,1260,"historical",FALSE,"ratios")
plot.xts(subset(v,subset=(v<0)),las=1,main=names(data.fx[[i]]),ylab="actual return/VaR estimate")
}
par(mfrow=c(1,1))
for (i in 1:length(data.fx)){
v<-varFun(data,.95,1260,"historical",FALSE,"ratios")
plot.xts(subset(v,subset=(v<0)),las=1,main=names(data.fx[[i]]),ylab="actual return/VaR estimate")
}
for (i in 1:length(data.fx)){
v<-varFun(data.fx[[i]],.95,1260,"historical",FALSE,"ratios")
plot.xts(subset(v,subset=(v<0)),las=1,main=names(data.fx[[i]]),ylab="actual return/VaR estimate")
}
data.fx<-list(DEXUSEU,1/DEXMXUS,DEXUSAL,DEXJPUS,1/DEXKOUS)
par(mfrow=(c(2,2)))
for (i in 1:length(data.fx)){
v<-varFun(data.fx[[i]],.95,1260,"historical",FALSE,"ratios")
plot.xts(subset(v,subset=(v<0)),las=1,main=names(data.fx[[i]]),ylab="actual return/VaR estimate")
}
?abline
vsum<-function(datalist,p,window,method,inv.var,draw){
# now, tickers is a list. We'll cycle through the list and generate our summary output.
# we can dispense with having to get the data on the fly.
# draw is a boolean that tell the function whether to plot the ratio series.
n<-length(datalist)
out<-data.frame()
for (i in 1:n){
ratios<-varFun(datalist[[i]],p,window,method,inv.var,"ratios")
ratios<-subset(ratios,subset=(ratios<0))
out[i,1]<-names(datalist[[i]])
out[i,2]<-min(ratios)
out[i,3]<-mean(ratios)
out[i,4]<-mode(ratios)
if (draw==TRUE){
plot.xts(subset(v,subset=(v<0)),las=1,main=names(data.fx[[i]]),ylab="act.ret/VaR est.")
abline(h=-1.0,col="red") # a line to demark the ratios where actual return exactly equaled the VaR estimate.
}
}
names(out)<-c("name","max.ratio","mean.ratio","mode.ratio")
return(out)
}
vb.summary<-vsum(data.equity,.95,1260,"historical",FALSE,TRUE)
vsum<-function(datalist,p,window,method,inv.var,draw){
# now, tickers is a list. We'll cycle through the list and generate our summary output.
# we can dispense with having to get the data on the fly.
# draw is a boolean that tell the function whether to plot the ratio series.
n<-length(datalist)
out<-data.frame()
for (i in 1:n){
ratios<-varFun(datalist[[i]],p,window,method,inv.var,"ratios")
ratios<-subset(ratios,subset=(ratios<0))
out[i,1]<-names(datalist[[i]])
out[i,2]<-min(ratios)
out[i,3]<-mean(ratios)
out[i,4]<-mode(ratios)
if (draw==TRUE){
plot.xts(ratios,las=1,main=names(datalist[[i]]),ylab="act.ret/VaR est.")
abline(h=-1.0,col="red") # a line to demark the ratios where actual return exactly equaled the VaR estimate.
}
}
names(out)<-c("name","max.ratio","mean.ratio","mode.ratio")
return(out)
}
par(mfrow=(c(1,1)))
vsum<-function(datalist,p,window,method,inv.var,draw){
# now, tickers is a list. We'll cycle through the list and generate our summary output.
# we can dispense with having to get the data on the fly.
# draw is a boolean that tell the function whether to plot the ratio series.
n<-length(datalist)
out<-data.frame()
for (i in 1:n){
ratios<-varFun(datalist[[i]],p,window,method,inv.var,"ratios")
ratios<-subset(ratios,subset=(ratios<0))
out[i,1]<-names(datalist[[i]])
out[i,2]<-min(ratios)
out[i,3]<-mean(ratios)
out[i,4]<-mode(ratios)
if (draw==TRUE){
plot.xts(ratios,las=1,main=names(datalist[[i]]),ylab="act.ret/VaR est.")
abline(h=-1.0,col="red") # a line to demark the ratios where actual return exactly equaled the VaR estimate.
}
}
names(out)<-c("name","max.ratio","mean.ratio","mode.ratio")
return(out)
}
vb.summary<-vsum(data.fx,.95,1260,"historical",FALSE,TRUE)
vb.summary
?mode
??mode
?mfv
?med
?median
vsum<-function(datalist,p,window,method,inv.var,draw){
# now, tickers is a list. We'll cycle through the list and generate our summary output.
# we can dispense with having to get the data on the fly.
# draw is a boolean that tell the function whether to plot the ratio series.
n<-length(datalist)
out<-data.frame()
for (i in 1:n){
ratios<-varFun(datalist[[i]],p,window,method,inv.var,"ratios")
ratios<-subset(ratios,subset=(ratios<0))
out[i,1]<-names(datalist[[i]])
out[i,2]<-min(ratios)
out[i,3]<-mean(ratios)
out[i,4]<-median(ratios)
if (draw==TRUE){
plot.xts(ratios,las=1,main=names(datalist[[i]]),ylab="act.ret/VaR est.")
abline(h=-1.0,col="red") # a line to demark the ratios where actual return exactly equaled the VaR estimate.
}
}
names(out)<-c("name","max.ratio","mean.ratio","mode.ratio")
return(out)
}
vsum<-function(datalist,p,window,method,inv.var,draw){
# now, tickers is a list. We'll cycle through the list and generate our summary output.
# we can dispense with having to get the data on the fly.
# draw is a boolean that tell the function whether to plot the ratio series.
n<-length(datalist)
out<-data.frame()
for (i in 1:n){
ratios<-varFun(datalist[[i]],p,window,method,inv.var,"ratios")
ratios<-subset(ratios,subset=(ratios<0))
out[i,1]<-names(datalist[[i]])
out[i,2]<-min(ratios)
out[i,3]<-mean(ratios)
out[i,4]<-median(ratios)
if (draw==TRUE){
plot.xts(ratios,las=1,main=names(datalist[[i]]),ylab="act.ret/VaR est.")
abline(h=-1.0,col="red") # a line to demark the ratios where actual return exactly equaled the VaR estimate.
}
}
names(out)<-c("name","max.ratio","mean.ratio","mode.ratio")
return(out)
}
par(mfrow=(c(1,1)))
vb.summary<-vsum(data.fx,.95,1260,method="historical",inv.var=FALSE,draw=TRUE)
vb.summary
vsum<-function(datalist,p,window,method,inv.var,draw){
# now, tickers is a list. We'll cycle through the list and generate our summary output.
# we can dispense with having to get the data on the fly.
# draw is a boolean that tell the function whether to plot the ratio series.
n<-length(datalist)
out<-data.frame()
for (i in 1:n){
ratios<-varFun(datalist[[i]],p,window,method,inv.var,"ratios")
ratios<-subset(ratios,subset=(ratios<0))
out[i,1]<-names(datalist[[i]])
out[i,2]<-min(ratios)
out[i,3]<-mean(ratios)
out[i,4]<-median(ratios)
if (draw==TRUE){
plot.xts(ratios,las=1,main=names(datalist[[i]]),ylab="act.ret/VaR est.")
abline(h=-1.0,col="red") # a line to demark the ratios where actual return exactly equaled the VaR estimate.
}
}
names(out)<-c("name","max.ratio","mean.ratio","median.ratio")
return(out)
}
ptm<-proc.time()
par(mfrow=(c(2,2))) # We'll do 4 plots per page.
data.master<-list(SP500,DJIA,DEXUSEU,1/DEXMXUS,DEXUSAL,DEXJPUS,1/DEXKOUS,DCOILWTICO,GOLDAMGBD228NLBM,DCOILBRENTEU,
DSWP2,DSWP10,DSWP30)
vb.summary<-vsum(data.master,.95,1260,method="historical",inv.var=FALSE,draw=TRUE)
vb.summary
proc.time()-ptm
histogram(vb.summary$max.ratio)
hist(vb.summary$max.ratio)
summary(vb.summary$max.ratio)
?trimmean
?trim
?mean
mean(vb.summary$max.ratio,trim=.10)
mean(vb.summary$max.ratio,trim=.0)
mean(vb.summary$max.ratio,trim=.20)
source('~/R/R Projects/VaR Analysis/VaR_analysis_script.R')
varFun<-function(x,p,window,method,inv.var,rtype){
ret<-periodReturn(x,period="daily",subset=NULL,type="log")
if (rtype=="vars"){
ret.var<-rollapply(ret,width=window,
FUN=function(ret) VaR(R=ret,
p=p,
method="historical",
clean="none",
portfolio_method="single",
weights=NULL,
#mu=ret.mu,
#sigma=ret.sig,
#m3=ret.skew,#skewness of series
#m4=ret.kurt,#kurtosis of series
invert=inv.var),
align="right")
ret.var<-as.xts(ret.var)
names(ret.var)<-c("VaR")
return(ret.var)
} else {
if (rtype=="returns"){
ret<-as.xts(ret)
names(ret)<-c("returns")
return(ret)
} else {
if (rtype=="ratios"){
ret.var<-rollapply(ret,width=window,
FUN=function(ret) VaR(R=ret,
p=p,
method="historical",
clean="none",
portfolio_method="single",
weights=NULL,
#mu=ret.mu,
#sigma=ret.sig,
#m3=ret.skew,#skewness of series
#m4=ret.kurt,#kurtosis of series
invert=inv.var),
align="right")
first.date<-index(first(ret.var))
ret.sub<-window(ret,from=first.date)
act.var.ratio<-as.xts(ret.sub/ret.var)
names(act.var.ratio)<-c("ratios")
return(act.var.ratio)
} else {
if (rtype=="vol"){
ret.sig<-rollapply(ret,width=window,FUN=function(ret) apply(X=ret,MARGIN=2, FUN=sd))
names(ret.sig)<-c("vols")
return(ret.sig)
} else {
if (rtype=="skew"){
ret.skew<-as.xts(rollapply(ret,width=window,FUN=function(ret) skewness(ret,method="moment")))
names(ret.skew)<-c("skew")
return(ret.skew)
} else {
if (rtype=="kurt"){
ret.kurt<-as.xts(rollapply(ret,width=window,FUN=function(ret) kurtosis(ret,method="moment")))
names(ret.kurt)<-c("kurtosis")
return(ret.kurt)
} else {
if (rtype=="mean"){
ret.mu<-as.xts(rollapply(ret,width=window,FUN=mean))
names(ret.mu)<-c("means")
return(as.xts(ret.mu))
} else {
return(Null)
}
}
}
}
}
}
}
}
